!!
!!  Copyright (C) 2011-2017  Johns Hopkins University
!!
!!  This file is part of lesgo.
!!
!!  lesgo is free software: you can redistribute it and/or modify
!!  it under the terms of the GNU General Public License as published by
!!  the Free Software Foundation, either version 3 of the License, or
!!  (at your option) any later version.
!!
!!  lesgo is distributed in the hope that it will be useful,
!!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!!  GNU General Public License for more details.
!!
!!  You should have received a copy of the GNU General Public License
!!  along with lesgo.  If not, see <http://www.gnu.org/licenses/>.
!!


! Input file for lesgo
!
! All lines beginning with '!' are comments All entries
! are not case sensitive. Data blocks must begin with
! '{' and end with '}'; the block name must be on the
! same line as the entry bracket '{'.
!
! Be sure to preserve the order of the data blocks as some depend on
! others during the read-in process
!

! Domain parameters
DOMAIN {

  ! Specify the number of processors to use (this is mainly to add
  ! compliance with other preprocessing programs)
  nproc = 2

  Nx = 64
  Ny = 64
  ! Total grid size (stored as nz_tot)
  Nz = 64

  ! Dimensional length scale [m]:
  z_i = 1000.0

  ! Non-dimensional domain length
  Lx = 3.141592654
  Ly = 3.141592654
  Lz = 1.0
  ! Specify whether to enforce uniform grid spacing.
  ! If .true. Ly and Lz will be determined to enforce dx=dy=dz based on
  ! Ny and Nz.
  ! NOTE: uniform spacing is required when using level set
  uniform_spacing = .false.

}

! Model parameters
MODEL {

  ! Model type: 1->Smagorinsky; 2->Dynamic; 3->Scale dependent
  !             4->Lagrangian scale-sim   5-> Lagragian scale-dep
  sgs_model = 5
  ! Wall damping exponent for Mason model (default 2)
  wall_damp_exp = 2

  ! Timesteps between dynamic Cs updates
  cs_count = 5

  ! When to start dynamic Cs calculations
  dyn_init = 100

  ! Co used in the Mason model for Smagorisky coefficient
  Co = 0.16

  ! Test filter type: 1->cut off 2->Gaussian 3->Top-hat
  ifilter = 1

  ! Dimensional velocity scale [m/s]
  u_star = 0.45

  ! von Karman constant
  vonk = 0.4

  ! Viscosity models
  sgs = .true.
  molec = .false.

  ! Dimensional molecular viscosity [m^2/s]
  nu_molec = 1.14e-5

}

CORIOLIS {

  ! Coriolis forcing
  !   0->Off; 1->Fixed geostrophic wind;
  !   2-> PID control of angle at specific height;
  !   3-> interpolate from input file coriolis.dat
  coriolis_forcing = 0

  ! fc -> coriolis parameter fc (dimensional)
  ! G -> geostrophic velocity (dimensional)
  ! alpha -> angle of geostrophic velocity
  !   (in radians measured counter-clockwise from x-direction)
  fc = 0.0001
  G = 8.0
  alpha = 0.0

  ! phi_set -> angle of planar-averaged velocity
  !   (in radians measured counter-clockwise from x-direction)
  ! height_set -> height of angle set point (dimensional)
  ! Kp, Ki, Kd -> PID controller gains (dimensional)
  pid_time = 1000000
  phi_set = 0.0
  height_set = 100
  Kp = 1e-4
  Ki = 3.8e-8
  Kd = 0.0

  ! How often to repeat_interval input file (dimensional)
  repeat_interval = 86400

}

TIME {

  ! Number of time steps to run simulation
  nsteps = 15000

  ! Specify the allowed runtime in seconds; simulation will exit if exceeded.
  ! This will only account for time loop, not initialization or finalization.
  ! To disable set < 0
  runtime = -1

  ! Specify CFL based dynamic time stepping (.true.)
  use_cfl_dt = .true.
  ! only used if use_cfl_dt=.true.
  cfl = 0.0625

  ! Set static time step
  ! only used if use_cfl_dt=.false.
  dt = 0.0048

  ! Use cumulative time across multiple simulations
  cumulative_time = .true.

}

! Solver parameters
FLOW_COND {

  ! Lower boundary condition:
  ! 0 - stress free, 1 - DNS wall, 2 - equilibrium wall model, 3 - integral wall model
  ! 4 - mts wall model
  ! NOTE: the upper boundary condition is implicitly stress free
  lbc_mom = 2
  ubc_mom = 0

  ! mts wall model settings
  ! qeq_case = 0 -> EQWM, qeq_case = 1 -> LaRTE
  qeq_case = 0
  velocity_correction_flag = .false.
  lamNEQ_flag = .false.
  turbNEQ_flag = .false.

  ! Point number away from the wall the wall model uses
  ! (only used for equilibrium smooth wall model)
  wmpt = 1

  ! Prescribe bottom and top wall streamwise velocity
  ! Only for DNS (sgs=.false.) and full channel (lbc_mom = ubc_mom = 1)
  ubot = 0.0
  utop = 0.0

  ! Sponge layer
  !   Sponge frequency specifies magnitude of sponge forcing (dimensionless)
  !   Sponge height is the bottom of the sponge layer (dimensionless)
  use_sponge = .false.
  sponge_frequency = 3.9
  sponge_height = 1.5

  ! Lower boundary condition, roughness length (non-dimensional)
  zo = 0.0001

  ! Inflow type
  ! 0 - periodic, 1 - uniform, 2 - homogenous isotropic turbulence (HIT),
  ! 3 - shifted periodic, 4 - concurrent precursor (CPS), 5 - rescale recycle
  ! 6 - rescale recycle fluctuations only
  inflow_type = 0

  ! If inflow_type > 0, the following should be set:
  ! position of right end of fringe region, as a fraction of L_x
  fringe_region_end = 1.0
  ! length of fringe region as a fraction of L_x
  fringe_region_len = 0.125

  ! Developing boundary layer settings
  ! Averaging (filtering) time scales
  tavg1_bl = 1.0
  tavg2_bl = 1.0
  ! Time when tavg2_bl is applied
  start_tavg2_bl = 1.0
  ! Time when time averaging begins (tavg=tavg+dt)
  start_tavg_bl = 1.0
  ! How quickly fringe force is applied 
  ! (smaller tscale = more rigid force)
  ! Written as fraction of fringe region length
  fringe_force_tscale = 0.2

  ! Uniform inflow settings
  inflow_velocity = 1.0

  ! HIT Inflow
  ! Fluctuation u' of the dataset (JHTDB)
  up_in = 0.681

  ! Turbulence intensity desired in the inflow
  TI_out = 0.25

  ! Dimensions of HIT box (non-dimensional using z_i)
  Lx_HIT = 1.
  Ly_HIT = 1.
  Lz_HIT = 1.

  ! Number of grid points in data
  Nx_HIT = 32
  Ny_HIT = 32
  Nz_HIT = 32

  ! Streamwise velocity file
  u_file = './HITData/binary_uFiltered_nx_32_ny_32_nz_32'
  v_file = './HITData/binary_vFiltered_nx_32_ny_32_nz_32'
  w_file = './HITData/binary_wFiltered_nx_32_ny_32_nz_32'

  ! Shifted periodic boundary conditions setting
  ! End of sampling region as a fraction of L_x
  ! sampling_region_end also used in rescale_recycle
  sampling_region_end = 0.625
  shift_n = 10

  ! Use mean pressure forcing
  use_mean_p_force = .true.
  ! Evalute mean pressure force. This will compute it as 1/Lz.
  ! The direction will be in the unit direction of mean_p_force
  ! It may be good idea to put .true. if uniform_spacing = .true.
  ! If .true. the setting for mean_p_force will be overridden.
  eval_mean_p_force = .true.
  ! Specify non-dimensional mean pressure forcing (Typically 1/Lz)
  mean_p_force_x = 1.0
  mean_p_force_y = 0.0

  ! Use random forcing
  use_random_force = .false.
  ! if true, specify how many time steps until random forcing stops
  stop_random_force = 20000
  ! if true, specify the rms magnitude of the random forcing
  rms_random_force = 0.4

  ! Separation induced by suction/blowing on top surface
  suction_blowing = .false.
  wmax_sb = 0.1333
  sigma_sb = 325.3333
  xc_sb = 1300.0
  phi_top_sb = 0.0034


}

! Output parameters
OUTPUT {

  ! Specify how often to display simulation update
  wbase = 100

  ! Specify of often to write KE to check_ke.out
  nenergy = 100

  ! Specify how often to display Lagrangian CFL condition of dynamic SGS
  ! models
  lag_cfl_count = 1000

  ! Turn on checkpointing restart data at intermediate time steps
  checkpoint_data = .false.
  ! Number of time steps to skip between checkpoints
  checkpoint_nskip = 10000

  ! Turn on time averaging
  ! records time-averaged data to files ./output/*_avg.dat
  tavg_calc = .false.
  ! Set when to start time averaging (based on global simulation time step)
  tavg_nstart = 50000
  ! Set when to stop time averaging
  tavg_nend = 9000000
  ! Set number of iterations to skip between samples
  tavg_nskip = 100

  ! Turn on instantaneous recording at specified points
  point_calc = .false.
  ! Set when to start recording
  point_nstart = 1
  ! Set when to stop recording
  point_nend = 1000000
  ! Set number of iterations to skip between recordings
  point_nskip = 10
  ! Specify location of points
  point_loc = 0.1, 0.1, 0.1 // 0.5, 0.5, 0.5 // 0.8, 0.8, 0.1

  ! Turn on instantaneous recording in entire domain
  domain_calc = .false.
  ! Set when to start recording
  domain_nstart = 1000
  ! Set when to stop recording
  domain_nend = 100000000
  ! Set number of iterations to skip between recordings
  domain_nskip = 1000

  ! Turn on instantaneous recording at specified x-planes
  xplane_calc = .false.
  ! Set when to start recording
  xplane_nstart = 1
  ! Set when to stop recording
  xplane_nend = 1000000
  ! Set number of iterations to skip between recordings
  xplane_nskip = 10
  ! Specify location of planes
  xplane_loc = 0.1, 0.2, 0.3

  ! Turn on instantaneous recording at specified y-planes
  yplane_calc = .false.
  ! Set when to start recording
  yplane_nstart = 1
  ! Set when to stop recording
  yplane_nend = 1000000
  ! Set number of iterations to skip between recordings
  yplane_nskip = 10
  ! Specify location of planes
  yplane_loc = 0.1, 0.2, 0.3

  ! Turn on instantaneous recording at specified z-planes
  zplane_calc = .false.
  ! Set when to start recording
  zplane_nstart = 1
  ! Set when to stop recording
  zplane_nend = 1000000
  ! Set number of iterations to skip between recordings
  zplane_nskip = 10
  ! Specify location of planes
  zplane_loc = 0.1, 0.2, 0.3

  ! Output entire top/bottom planes of wall stress data
  ws_plane_calc = .false.
  ws_plane_nstart = 0
  ws_plane_nend = 100000
  ws_plane_nskip = 100

  ! Compute reversed wall stress intermittency
  ! (for suction-blowing tests)
  ws_inter_calc = .false.
  ws_inter_nstart = 0
  ws_inter_nend = 100000

  ! Record MTS variables along line in x-direction
  mts_line_calc = .false.
  ! Set when to start recording
  mts_line_nstart = 1
  ! Set when to stop recording
  mts_line_nend = 1
  ! Set number of iterations to skip between recordings
  mts_line_nskip = 1
  ! Set number of points to skip in x-direction
  mts_line_iskip = 1

}

LEVEL_SET {

  ! Compute global CA (normalized force time area) based on inflow velocity
  global_CA_calc = .true.
  ! Number of time steps to skip between global CA writes
  global_CA_nskip = 10

  ! Forcing velocity to specified level set BC value
  ! Requires use_log_profile and/or use_enforce_un
  ! (default .false.)
  vel_BC = .false.

  ! Specify handling of level set boundary conditions and treatment.
  ! If unsure please use default values as they are the safest.
  ! (default = .false.)
  use_log_profile = .false.
  ! (default = .false.)
  use_enforce_un = .false.
  ! (default = .true.)
  physBC = .true.
  ! (default = .true.)
  use_smooth_tau = .true.
  ! (default = .false.)
  use_extrap_tau_log = .false.
  ! (default = .true.)
  use_extrap_tau_simple = .true.
  ! Only works w/interp_tau; not MPI compliant
  ! wont work w/extra_tau_log
  ! (default = .false.)
  use_modify_dutdn = .false.

  ! Enables scale dependent Cs evaluations (not dynamic evaluation)
  ! Used only when sgs_model = 4
  lag_dyn_modify_beta = .true.

  ! Configures the mode in which SOR smoothing is applied in the IB
  ! 'xy' may be safely used in most cases (must be used for MPI cases)
  ! '3d' not MPI compliant
  smooth_mode = 'xy'

  ! Surface roughness used for level_set surfaces (non-dimensional)
  zo_level_set = 0.0001

  ! Use the trees_pre_ls functionality
  use_trees = .true.
}

TURBINES {

  ! Number of turbines in the x- and y-directions
  num_x = 4
  num_y = 8

  ! Placement: (all evenly spaced)
  !  1 = aligned
  !  2 = horizontally staggered
  !  3 = vertically staggered by rows (+/- stag_perc%)
  !  4 = vertically staggered checkerboard (+/- stag_perc%)
  !  5 = horizontally staggered, shifted forward for CPS simulations
  !      note: setting stag_prec to 0 will create aligned array
  orientation = 1
  stag_perc = 50

  ! Turbine dimensions, baseline diameter/height/thickness [meters]
  dia_all = 100
  height_all = 100
  thk_all = 1

  ! Direction turbine is pointing
  !  theta1 is angle CCW (from above) from -x dir [degrees]
  !  theta2 is angle above horizontal
  theta1_all = 0
  theta2_all = 0

  ! Thrust coefficient (Ct')
  Ct_prime = 1.33

  ! Read all turbine parameters above from input_turbines/param.dat
  !   This file is comma separated with each turbine on a line with the
  !   following values for each turbine:
  !     xloc [meters], yloc [meters], height [meters], dia [meters], thk [meters],
  !     theta1 [degrees], theta2 [degrees], Ct_prime [-]
  !   The number of lines must equal num_x*num_y
  read_param = .false.

  ! Specify turbine direction and thrust coefficient dynamically. This will ignore the
  ! values specified above or in input_turbines/param.dat.
  !   If true, then these values are interpolated from the comma separated files:
  !     input_turbines/theta1.dat
  !     input_turbines/theta2.dat
  !     input_turbines/Ct_prime.dat
  !   Each line is a time point (dimensional time) and must have num_x*num_y entries
  !   per line. Dynamic changes are interpolated between each time point.
  dyn_theta1 = .false.
  dyn_theta2 = .false.
  dyn_Ct_prime = .false.

  ! Use ADM with rotation
  use_rotation = .false.
  ! Tip speed ratio for ADM with rotation
  tip_speed_ratio = 7

  ! Time scale for one-sided exponential filtering of u_d signal [seconds]
  !   T_avg_dim <= 0 will provide no filtering.
  T_avg_dim = -1

  ! Filtering operation, Gaussian
  !  alpha1 is the filter size as a multiple of the grid spacing in the normal direction
  !  alpha2 is the filter size as a multiple of the grid spacing in the radial direction
  !  filter_cufoff sets the threshold for the unnormalized indicator function.
  !    For a well-resolved turbine, the unnormalized indicator function will be near unity.
  !    Only values above the threshold will used.
  alpha1 = 1.5
  alpha2 = 1.5
  filter_cutoff = 1e-2

  ! Correct ADM for filtered indicator function
  adm_correction = .true.

  ! The number of timesteps between the output for the turbines
  tbase = 20

}

SCALARS {

  ! Lower boundary conditions
  ! 0 - prescribed temperature, 1 - prescribed flux
  lbc_scal = 0
  scal_bot = 300.0
  flux_bot = 0.0

  ! Read lbc from file lbc_scal.dat
  read_lbc_scal = .false.

  ! Upper boundary condtion
  ! An inversion layer is specified above with the given lapse rate [K/m].
  lapse_rate = 0.01

  ! Initial condition points (dimensional)
  ! Temperature extrapolated to top using lapse_rate
  ic_z = 0, 800, 900
  ic_theta = 300, 300, 309
  ic_no_vel_noise_z = 600

  ! Gravitational acceleration (m/s^2)
  g = 9.81

  ! Roughness length for scalars (dimensionless). typically zo/10
  zo_s = 0.00001

  ! Reference temperature scale (K)
  T_scale = 300

  ! Use passive temperature
  passive_scalar = .false.

  ! Scalars SGS model (Constant SGS Prandtl number)
  ! SGS prandtl number
  Pr_sgs = 0.4

}
